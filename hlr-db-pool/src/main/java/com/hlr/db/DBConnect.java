package com.hlr.db;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.InputStream;
import java.math.BigDecimal;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.Calendar;

/**
 * DBConnect
 * Description:
 * date: 2023/12/1 15:03
 *
 * @author hlr
 */
public class DBConnect {

    private static final Logger logger = LoggerFactory.getLogger(DBConnect.class);
    private Statement stmt;
    private PreparedStatement prepstmt;
    private Connection conn;
    private String dbname;
    private boolean autoCommit;
    private boolean binlog = true;

    public DBConnect(String dbname) {
        try {
            this.init(dbname, true);
        } catch (Exception var3) {
            logger.error(dbname, var3);
            var3.printStackTrace();
        }

    }

    public DBConnect(String dbname, boolean autoCommit) {
        try {
            this.init(dbname, autoCommit);
        } catch (Exception var4) {
            logger.error(dbname, var4);
            var4.printStackTrace();
        }

    }

    public DBConnect(String dbname, boolean autoCommit, boolean binlog) {
        try {
            this.init(dbname, autoCommit);
        } catch (Exception var5) {
            logger.error(dbname, var5);
            var5.printStackTrace();
        }

        this.binlog = binlog;
    }

    public DBConnect() {
    }

    public DBConnect(boolean autoCommit) {
        try {
            this.init((String) null, autoCommit);
        } catch (Exception var3) {
            logger.error(this.dbname, var3);
            var3.printStackTrace();
        }

    }

    public void init(String dbname) throws Exception {
        this.init(dbname, true);
    }

    public void init(String dbname, boolean autoCommit) throws Exception {
        this.dbname = dbname;
        DBConnectionPools dbcp = DBConnectionPools.getInstance();
        this.conn = dbcp.getConnection(dbname);
        if (this.conn == null) {
            logger.error("conn is null, you should check errorlog for detail.");
        } else {
            this.stmt = this.conn.createStatement();
            this.autoCommit = autoCommit;
            this.conn.setAutoCommit(autoCommit);
        }
    }

    public void setDefaultRowPrefetch(int level) throws SQLException {
        if (this.conn != null) {
            this.conn.setTransactionIsolation(level);
        }

    }

    public void commit() throws SQLException {
        if (this.conn != null) {
            this.conn.commit();
        }

    }

    public void rollback() throws SQLException {
        if (this.conn != null) {
            this.conn.rollback();
        }

    }

    public Connection getConnection() {
        return this.conn;
    }

    public CallableStatement prepareCall(String s) throws Exception {
        return this.conn != null ? this.conn.prepareCall(s) : null;
    }

    public void prepareStatement(String s) throws Exception {
        if (this.conn != null) {
            this.prepstmt = this.conn.prepareStatement(s);
        } else {
            throw new HlrPoolException("db connect is null....");
        }
    }

    public void prepareStatement(String s, int autoGeneratedKeys) throws Exception {
        if (this.conn != null) {
            this.prepstmt = this.conn.prepareStatement(s, autoGeneratedKeys);
        } else {
            throw new HlrPoolException("db connect is null....");
        }
    }

    public void prepareStatement(String s, int i, int j) throws SQLException {
        if (this.conn != null) {
            this.prepstmt = this.conn.prepareStatement(s, i, j);
        }

    }

    public void setString(int i, String s) throws SQLException {
        this.prepstmt.setString(i, s);
    }

    public void setInt(int i, int j) throws SQLException {
        this.prepstmt.setInt(i, j);
    }

    public void setBoolean(int i, boolean flag) throws SQLException {
        this.prepstmt.setInt(i, flag ? 1 : 0);
    }

    public void setDate(int i, Date date) throws SQLException {
        this.prepstmt.setDate(i, date);
    }

    public void setTimestamp(int i, Timestamp timestamp) throws SQLException {
        this.prepstmt.setTimestamp(i, timestamp);
    }

    public void setTimestamp(int i, Timestamp timestamp, Calendar ca) throws SQLException {
        this.prepstmt.setTimestamp(i, timestamp, ca);
    }

    public void setShort(int i, short s) throws SQLException {
        this.prepstmt.setShort(i, s);
    }

    public void setLong(int i, long l) throws SQLException {
        this.prepstmt.setLong(i, l);
    }

    public void setFloat(int i, float f) throws SQLException {
        this.prepstmt.setFloat(i, f);
    }

    public void setBlob(int i, Blob blob) throws SQLException {
        this.prepstmt.setBlob(i, blob);
    }

    public void setClob(int i, Clob clob) throws SQLException {
        this.prepstmt.setClob(i, clob);
    }

    public void setObject(int i, Object obj) throws SQLException {
        this.prepstmt.setObject(i, obj);
    }

    public void setArray(int i, Array arr) throws SQLException {
        this.prepstmt.setArray(i, arr);
    }

    public void setRef(int i, Ref ref) throws SQLException {
        this.prepstmt.setRef(i, ref);
    }

    public void setAsciiStream(int i, InputStream in, int length) throws SQLException {
        this.prepstmt.setAsciiStream(i, in, length);
    }

    public void setBigDecimal(int i, BigDecimal x) throws SQLException {
        this.prepstmt.setBigDecimal(i, x);
    }

    public void setByte(int i, byte x) throws SQLException {
        this.prepstmt.setByte(i, x);
    }

    public void setNull(int i, int sqlType) throws SQLException {
        this.prepstmt.setNull(i, sqlType);
    }

    public void setDouble(int i, double d) throws SQLException {
        this.prepstmt.setDouble(i, d);
    }

    public void setBytes(int i, byte[] abyte0) throws SQLException {
        this.prepstmt.setBytes(i, abyte0);
    }

    public void clearParameters() throws SQLException {
        this.prepstmt.clearParameters();
    }

    public void clearBatch() throws SQLException {
        this.prepstmt.clearBatch();
    }

    public PreparedStatement getPreparedStatement() {
        return this.prepstmt;
    }

    public Statement getStatement() {
        return this.stmt;
    }

    public ResultSet executeQuery(String s) throws SQLException {
        if (this.stmt != null) {
            ResultSet rs = null;

            try {
                rs = this.stmt.executeQuery(s);
                return rs;
            } catch (SQLException var4) {
                throw var4;
            }
        } else {
            return null;
        }
    }

    public ResultSet executeQuery() throws SQLException {
        if (this.prepstmt != null) {
            ResultSet rs = null;

            try {
                rs = this.prepstmt.executeQuery();
                return rs;
            } catch (SQLException var3) {
                throw var3;
            }
        } else {
            return null;
        }
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        if (this.prepstmt != null) {
            ResultSet rs = null;

            try {
                rs = this.prepstmt.getGeneratedKeys();
                return rs;
            } catch (SQLException var3) {
                throw var3;
            }
        } else {
            return null;
        }
    }

    public int[] executeBatch() throws SQLException {
        if (this.prepstmt != null) {
            int[] ret = null;

            try {
                this.setBinLog();
                ret = this.prepstmt.executeBatch();
                return ret;
            } catch (SQLException var3) {
                throw var3;
            }
        } else {
            return null;
        }
    }

    public int executeUpdate(String s) throws SQLException {
        if (this.stmt != null) {
            int ret = 0;

            try {
                this.setBinLog();
                ret = this.stmt.executeUpdate(s);
                return ret;
            } catch (SQLException var4) {
                throw var4;
            }
        } else {
            return 0;
        }
    }

    public int executeUpdate() throws SQLException {
        if (this.prepstmt != null) {
            int ret = 0;

            try {
                this.setBinLog();
                ret = this.prepstmt.executeUpdate();
                return ret;
            } catch (SQLException var3) {
                throw var3;
            }
        } else {
            return 0;
        }
    }

    private void setBinLog() throws SQLException {
        if (this.stmt != null && !this.binlog) {
            this.stmt.executeUpdate("set sql_log_bin=0;");
        }

    }

    public void addBatch() throws SQLException {
        if (this.prepstmt != null) {
            this.prepstmt.addBatch();
        }

    }

    public void addBatch(String s) throws SQLException {
        if (this.prepstmt != null) {
            this.prepstmt.addBatch(s);
        }

    }

    public void close() {
        try {
            if (this.prepstmt != null) {
                this.prepstmt.close();
                this.prepstmt = null;
            }

            if (this.stmt != null) {
                this.stmt.close();
                this.stmt = null;
            }

            if (this.conn != null) {
                if (!this.autoCommit) {
                    this.conn.commit();
                }

                this.conn.close();
            }
        } catch (SQLException var2) {
            logger.error(this.dbname, var2);
            var2.printStackTrace();
        }

    }
}
